
MCU_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a24  08004a24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  08004a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004a40  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013092  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276f  00000000  00000000  000330ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00035840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00036850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239c2  00000000  00000000  00037758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013302  00000000  00000000  0005b11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad4a  00000000  00000000  0006e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  001491b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080049c4 	.word	0x080049c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080049c4 	.word	0x080049c4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_CAN1_Init+0x64>)
 80004de:	4a18      	ldr	r2, [pc, #96]	; (8000540 <MX_CAN1_Init+0x68>)
 80004e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_CAN1_Init+0x64>)
 80004e4:	2210      	movs	r2, #16
 80004e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_CAN1_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_CAN1_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_CAN1_Init+0x64>)
 80004f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_CAN1_Init+0x64>)
 80004fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000502:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_CAN1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_CAN1_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <MX_CAN1_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_CAN1_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_CAN1_Init+0x64>)
 800052a:	f000 fea1 	bl	8001270 <HAL_CAN_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000534:	f000 fc74 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000028 	.word	0x20000028
 8000540:	40006400 	.word	0x40006400

08000544 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0x9c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d138      	bne.n	80005d8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 800056c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000570:	6593      	str	r3, [r2, #88]	; 0x58
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_CAN_MspInit+0xa0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000596:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 80005a8:	230a      	movs	r3, #10
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <HAL_CAN_MspInit+0xa4>)
 80005b4:	f001 fcde 	bl	8001f74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2014      	movs	r0, #20
 80005be:	f001 fca2 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005c2:	2014      	movs	r0, #20
 80005c4:	f001 fcbb 	bl	8001f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2015      	movs	r0, #21
 80005ce:	f001 fc9a 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005d2:	2015      	movs	r0, #21
 80005d4:	f001 fcb3 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	; 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40006400 	.word	0x40006400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400

080005ec <CAN_RX_Header_defunc>:
uint8_t GyroData[8]   = {0};
uint8_t test_count = 0;
extern uint8_t TX_BUFFER[BUFFER_LEN];

void CAN_RX_Header_defunc() //CAN_RX_HEADER
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	filtername.FilterActivation = CAN_FILTER_ENABLE; // filter on,off
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	621a      	str	r2, [r3, #32]
	filtername.FilterBank = 1; // filterbank initialize single can = 0~13, dual can = 0~27
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
	filtername.FilterFIFOAssignment = CAN_FILTER_FIFO0; // fifo assgin 0 or 1
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
	filtername.FilterIdHigh = 0x0000;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
	filtername.FilterIdLow = 0x0000;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
	filtername.FilterMaskIdHigh = 0x0000;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	filtername.FilterMaskIdLow = 0x0000;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
	filtername.FilterMode = CAN_FILTERMODE_IDMASK; // filter mode -> mask or list
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
	filtername.FilterScale = CAN_FILTERSCALE_16BIT; // filter scale
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
	// filtername.SlaveStartFilterBank // only dual can

	HAL_CAN_ConfigFilter(&hcan1, &filtername);
 8000626:	4903      	ldr	r1, [pc, #12]	; (8000634 <CAN_RX_Header_defunc+0x48>)
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <CAN_RX_Header_defunc+0x4c>)
 800062a:	f000 ff1c 	bl	8001466 <HAL_CAN_ConfigFilter>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000084 	.word	0x20000084
 8000638:	20000028 	.word	0x20000028

0800063c <CAN_TX_Header_defunc>:

void CAN_TX_Header_defunc() //CAN_TX_HEADER
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	CAN_TXH.DLC = 8;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 8000642:	2208      	movs	r2, #8
 8000644:	611a      	str	r2, [r3, #16]
	CAN_TXH.IDE = CAN_ID_STD;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	CAN_TXH.RTR = CAN_RTR_DATA;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	CAN_TXH.StdId = 0xf3;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 8000654:	22f3      	movs	r2, #243	; 0xf3
 8000656:	601a      	str	r2, [r3, #0]
	CAN_TXH.TransmitGlobalTime = DISABLE;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <CAN_TX_Header_defunc+0x2c>)
 800065a:	2200      	movs	r2, #0
 800065c:	751a      	strb	r2, [r3, #20]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000050 	.word	0x20000050

0800066c <CAN_Error_Handler>:

void CAN_Error_Handler() // CAN_START & CAN_ERROR
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	if (HAL_CAN_ConfigFilter(&hcan1, &filtername) != HAL_OK)
 8000670:	490d      	ldr	r1, [pc, #52]	; (80006a8 <CAN_Error_Handler+0x3c>)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <CAN_Error_Handler+0x40>)
 8000674:	f000 fef7 	bl	8001466 <HAL_CAN_ConfigFilter>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <CAN_Error_Handler+0x16>
	{
		// Filter configuration Error
		Error_Handler();
 800067e:	f000 fbcf 	bl	8000e20 <Error_Handler>
	}

	// Can Start
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000682:	480a      	ldr	r0, [pc, #40]	; (80006ac <CAN_Error_Handler+0x40>)
 8000684:	f000 ffb9 	bl	80015fa <HAL_CAN_Start>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <CAN_Error_Handler+0x26>
	{
		// Start Error
		Error_Handler();
 800068e:	f000 fbc7 	bl	8000e20 <Error_Handler>
	}

	// Activate CAN RX notification
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000692:	2102      	movs	r1, #2
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <CAN_Error_Handler+0x40>)
 8000696:	f001 f906 	bl	80018a6 <HAL_CAN_ActivateNotification>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <CAN_Error_Handler+0x38>
			!= HAL_OK)
	{
		// Notification Error
		Error_Handler();
 80006a0:	f000 fbbe 	bl	8000e20 <Error_Handler>
	}
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000084 	.word	0x20000084
 80006ac:	20000028 	.word	0x20000028

080006b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
		count = 0;
	}
}*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle) //CAN_RX
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &CAN_RXH, RXData) != HAL_OK)
 80006b8:	4b9f      	ldr	r3, [pc, #636]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80006ba:	4aa0      	ldr	r2, [pc, #640]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 ffdf 	bl	8001682 <HAL_CAN_GetRxMessage>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80006ca:	f000 fba9 	bl	8000e20 <Error_Handler>
	}

	switch (CAN_RXH.StdId)
 80006ce:	4b9b      	ldr	r3, [pc, #620]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f240 12b1 	movw	r2, #433	; 0x1b1
 80006d6:	4293      	cmp	r3, r2
 80006d8:	f000 8192 	beq.w	8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>
 80006dc:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 80006e0:	f080 8212 	bcs.w	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 80006e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80006e8:	f000 8087 	beq.w	80007fa <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
 80006ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80006f0:	f200 820a 	bhi.w	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 80006f4:	2bff      	cmp	r3, #255	; 0xff
 80006f6:	f000 818e 	beq.w	8000a16 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 80006fa:	2bff      	cmp	r3, #255	; 0xff
 80006fc:	f200 8204 	bhi.w	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 8000700:	2b09      	cmp	r3, #9
 8000702:	d83d      	bhi.n	8000780 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
 8000704:	2b00      	cmp	r3, #0
 8000706:	d121      	bne.n	800074c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
			TX_BUFFER[81] = GyroData[7];
		}
		break;
	} //switch end

}
 8000708:	e1fe      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
	switch (CAN_RXH.StdId)
 800070a:	3ba0      	subs	r3, #160	; 0xa0
 800070c:	2b0c      	cmp	r3, #12
 800070e:	f200 81fb 	bhi.w	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000873 	.word	0x08000873
 800071c:	08000885 	.word	0x08000885
 8000720:	08000897 	.word	0x08000897
 8000724:	080008b9 	.word	0x080008b9
 8000728:	08000b09 	.word	0x08000b09
 800072c:	080008cf 	.word	0x080008cf
 8000730:	080008e5 	.word	0x080008e5
 8000734:	08000945 	.word	0x08000945
 8000738:	08000997 	.word	0x08000997
 800073c:	08000b09 	.word	0x08000b09
 8000740:	080009c1 	.word	0x080009c1
 8000744:	08000b09 	.word	0x08000b09
 8000748:	080009d7 	.word	0x080009d7
 800074c:	3b01      	subs	r3, #1
 800074e:	2b08      	cmp	r3, #8
 8000750:	f200 81da 	bhi.w	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	0800078d 	.word	0x0800078d
 8000760:	080007b3 	.word	0x080007b3
 8000764:	080007d7 	.word	0x080007d7
 8000768:	08000b09 	.word	0x08000b09
 800076c:	08000b09 	.word	0x08000b09
 8000770:	08000b09 	.word	0x08000b09
 8000774:	08000b09 	.word	0x08000b09
 8000778:	08000b09 	.word	0x08000b09
 800077c:	08000849 	.word	0x08000849
 8000780:	2bac      	cmp	r3, #172	; 0xac
 8000782:	f200 81c1 	bhi.w	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 8000786:	2ba0      	cmp	r3, #160	; 0xa0
 8000788:	d2bf      	bcs.n	800070a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
}
 800078a:	e1bd      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		for (int i = 0; i < 7; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00b      	b.n	80007aa <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			TX_BUFFER[i] = RXData[i];
 8000792:	4a69      	ldr	r2, [pc, #420]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	7819      	ldrb	r1, [r3, #0]
 800079a:	4a69      	ldr	r2, [pc, #420]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	460a      	mov	r2, r1
 80007a2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 7; i++)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3301      	adds	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	ddf0      	ble.n	8000792 <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
		break;
 80007b0:	e1aa      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		for (int i = 0; i < 5; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e00a      	b.n	80007ce <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
			TX_BUFFER[i+7] = RXData[i];
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	3307      	adds	r3, #7
 80007bc:	495e      	ldr	r1, [pc, #376]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	440a      	add	r2, r1
 80007c2:	7811      	ldrb	r1, [r2, #0]
 80007c4:	4a5e      	ldr	r2, [pc, #376]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80007c6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 5; i++)
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	3301      	adds	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	ddf1      	ble.n	80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
		break;
 80007d4:	e198      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		for (int i = 0; i < 5; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e00a      	b.n	80007f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x142>
			TX_BUFFER[i+12] = RXData[i];
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	330c      	adds	r3, #12
 80007e0:	4955      	ldr	r1, [pc, #340]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	440a      	add	r2, r1
 80007e6:	7811      	ldrb	r1, [r2, #0]
 80007e8:	4a55      	ldr	r2, [pc, #340]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80007ea:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 5; i++)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	ddf1      	ble.n	80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
		break;
 80007f8:	e186      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[17] = RXData[1]; // pack voltage msb
 80007fa:	4b4f      	ldr	r3, [pc, #316]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80007fc:	785a      	ldrb	r2, [r3, #1]
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000800:	745a      	strb	r2, [r3, #17]
		TX_BUFFER[18] = RXData[2]; // pack voltage lsb
 8000802:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000804:	789a      	ldrb	r2, [r3, #2]
 8000806:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000808:	749a      	strb	r2, [r3, #18]
		TX_BUFFER[82] = RXData[0]; // bms stat
 800080a:	4b4b      	ldr	r3, [pc, #300]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000810:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		TX_BUFFER[83] = RXData[3]; // ntc temp msb
 8000814:	4b48      	ldr	r3, [pc, #288]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000816:	78da      	ldrb	r2, [r3, #3]
 8000818:	4b49      	ldr	r3, [pc, #292]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800081a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		TX_BUFFER[84] = RXData[4]; // ntc temp lsb
 800081e:	4b46      	ldr	r3, [pc, #280]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000820:	791a      	ldrb	r2, [r3, #4]
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000824:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		TX_BUFFER[85] = RXData[5]; // curent msb
 8000828:	4b43      	ldr	r3, [pc, #268]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800082a:	795a      	ldrb	r2, [r3, #5]
 800082c:	4b44      	ldr	r3, [pc, #272]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800082e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		TX_BUFFER[86] = RXData[6]; // current lsb
 8000832:	4b41      	ldr	r3, [pc, #260]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000834:	799a      	ldrb	r2, [r3, #6]
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000838:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		TX_BUFFER[87] = RXData[7]; // count
 800083c:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800083e:	79da      	ldrb	r2, [r3, #7]
 8000840:	4b3f      	ldr	r3, [pc, #252]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000842:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		break;
 8000846:	e15f      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[19] = RXData[0]; // SOC uint8_t
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800084e:	74da      	strb	r2, [r3, #19]
		TX_BUFFER[20] = RXData[1]; // SOC .xx
 8000850:	4b39      	ldr	r3, [pc, #228]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000852:	785a      	ldrb	r2, [r3, #1]
 8000854:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000856:	751a      	strb	r2, [r3, #20]
		TX_BUFFER[21] = RXData[2]; // current uint8_t
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800085a:	789a      	ldrb	r2, [r3, #2]
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800085e:	755a      	strb	r2, [r3, #21]
		TX_BUFFER[22] = RXData[3]; // current .xx
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000862:	78da      	ldrb	r2, [r3, #3]
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000866:	759a      	strb	r2, [r3, #22]
		TX_BUFFER[23] = RXData[4]; // max current uint8_t
 8000868:	4b33      	ldr	r3, [pc, #204]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800086a:	791a      	ldrb	r2, [r3, #4]
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800086e:	75da      	strb	r2, [r3, #23]
		break;
 8000870:	e14a      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[24] = RXData[6];
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000874:	799a      	ldrb	r2, [r3, #6]
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000878:	761a      	strb	r2, [r3, #24]
		TX_BUFFER[25] = RXData[7];
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800087c:	79da      	ldrb	r2, [r3, #7]
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000880:	765a      	strb	r2, [r3, #25]
		break;
 8000882:	e141      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[26] = RXData[0];
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800088a:	769a      	strb	r2, [r3, #26]
		TX_BUFFER[27] = RXData[1];
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000892:	76da      	strb	r2, [r3, #27]
		break;
 8000894:	e138      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[28] = RXData[0]; // no working
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800089c:	771a      	strb	r2, [r3, #28]
		TX_BUFFER[29] = RXData[1];
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008a0:	785a      	ldrb	r2, [r3, #1]
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008a4:	775a      	strb	r2, [r3, #29]
		TX_BUFFER[30] = RXData[4]; // motor temp
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008a8:	791a      	ldrb	r2, [r3, #4]
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008ac:	779a      	strb	r2, [r3, #30]
		TX_BUFFER[31] = RXData[5];
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008b0:	795a      	ldrb	r2, [r3, #5]
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008b4:	77da      	strb	r2, [r3, #31]
		break;
 80008b6:	e127      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[32] = RXData[0];
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008be:	f883 2020 	strb.w	r2, [r3, #32]
		TX_BUFFER[33] = RXData[1];
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008c4:	785a      	ldrb	r2, [r3, #1]
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		break;
 80008cc:	e11c      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[34] = RXData[2];
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008d0:	789a      	ldrb	r2, [r3, #2]
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		TX_BUFFER[35] = RXData[3];
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008da:	78da      	ldrb	r2, [r3, #3]
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 80008e2:	e111      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[36] = RXData[0];
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		TX_BUFFER[37] = RXData[1]; // Phase A
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008f0:	785a      	ldrb	r2, [r3, #1]
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		TX_BUFFER[38] = RXData[2];
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80008fa:	789a      	ldrb	r2, [r3, #2]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80008fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		TX_BUFFER[39] = RXData[3]; // Phase B
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000904:	78da      	ldrb	r2, [r3, #3]
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000908:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		TX_BUFFER[40] = RXData[4];
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800090e:	791a      	ldrb	r2, [r3, #4]
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		TX_BUFFER[41] = RXData[5]; // Phase C
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000918:	795a      	ldrb	r2, [r3, #5]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800091c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		TX_BUFFER[42] = RXData[6];
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000922:	799a      	ldrb	r2, [r3, #6]
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000926:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		TX_BUFFER[43] = RXData[7]; // DC Bus
 800092a:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800092c:	79da      	ldrb	r2, [r3, #7]
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8000930:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		break;
 8000934:	e0e8      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
 8000936:	bf00      	nop
 8000938:	200000ac 	.word	0x200000ac
 800093c:	20000068 	.word	0x20000068
 8000940:	200000bc 	.word	0x200000bc
		TX_BUFFER[44] = RXData[0];
 8000944:	4b72      	ldr	r3, [pc, #456]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4b72      	ldr	r3, [pc, #456]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800094a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		TX_BUFFER[45] = RXData[1]; // DC Bus
 800094e:	4b70      	ldr	r3, [pc, #448]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	4b70      	ldr	r3, [pc, #448]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000954:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		TX_BUFFER[46] = RXData[2];
 8000958:	4b6d      	ldr	r3, [pc, #436]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800095a:	789a      	ldrb	r2, [r3, #2]
 800095c:	4b6d      	ldr	r3, [pc, #436]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800095e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		TX_BUFFER[47] = RXData[3]; // Output
 8000962:	4b6b      	ldr	r3, [pc, #428]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000964:	78da      	ldrb	r2, [r3, #3]
 8000966:	4b6b      	ldr	r3, [pc, #428]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000968:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		TX_BUFFER[48] = RXData[4];
 800096c:	4b68      	ldr	r3, [pc, #416]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800096e:	791a      	ldrb	r2, [r3, #4]
 8000970:	4b68      	ldr	r3, [pc, #416]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		TX_BUFFER[49] = RXData[5]; // VAB_Vd
 8000976:	4b66      	ldr	r3, [pc, #408]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000978:	795a      	ldrb	r2, [r3, #5]
 800097a:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800097c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		TX_BUFFER[50] = RXData[6];
 8000980:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000982:	799a      	ldrb	r2, [r3, #6]
 8000984:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000986:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		TX_BUFFER[51] = RXData[7]; // VAB_Vq
 800098a:	4b61      	ldr	r3, [pc, #388]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800098c:	79da      	ldrb	r2, [r3, #7]
 800098e:	4b61      	ldr	r3, [pc, #388]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000990:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		break;
 8000994:	e0b8      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[52] = RXData[4];
 8000996:	4b5e      	ldr	r3, [pc, #376]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000998:	791a      	ldrb	r2, [r3, #4]
 800099a:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800099c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		TX_BUFFER[53] = RXData[5]; // ID_current
 80009a0:	4b5b      	ldr	r3, [pc, #364]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009a2:	795a      	ldrb	r2, [r3, #5]
 80009a4:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		TX_BUFFER[54] = RXData[6];
 80009aa:	4b59      	ldr	r3, [pc, #356]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009ac:	799a      	ldrb	r2, [r3, #6]
 80009ae:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		TX_BUFFER[55] = RXData[7]; // IQ_current
 80009b4:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009b6:	79da      	ldrb	r2, [r3, #7]
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009ba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 80009be:	e0a3      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[56] = RXData[0]; // VSM State
 80009c0:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		TX_BUFFER[57] = RXData[2]; // Inverter State
 80009ca:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009cc:	789a      	ldrb	r2, [r3, #2]
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 80009d4:	e098      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[58] = RXData[0];
 80009d6:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	4b4e      	ldr	r3, [pc, #312]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		TX_BUFFER[59] = RXData[1]; // Commanded Torque
 80009e0:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009e2:	785a      	ldrb	r2, [r3, #1]
 80009e4:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009e6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		TX_BUFFER[60] = RXData[2];
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009ec:	789a      	ldrb	r2, [r3, #2]
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		TX_BUFFER[61] = RXData[3]; // Torque Feedback
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80009f6:	78da      	ldrb	r2, [r3, #3]
 80009f8:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80009fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80009fe:	e083      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		TX_BUFFER[62] = RXData[0];
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		TX_BUFFER[63] = RXData[1];
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000a0c:	785a      	ldrb	r2, [r3, #1]
 8000a0e:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		break;
 8000a14:	e078      	b.n	8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>
		for (int i = 0; i < 8; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	e00b      	b.n	8000a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>
			GyroData[i] = RXData[i];
 8000a1c:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	7819      	ldrb	r1, [r3, #0]
 8000a24:	4a3c      	ldr	r2, [pc, #240]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	ddf0      	ble.n	8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>
		if (GyroData[1] == 0x33) //acc
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	2b33      	cmp	r3, #51	; 0x33
 8000a40:	d11d      	bne.n	8000a7e <HAL_CAN_RxFifo0MsgPendingCallback+0x3ce>
			TX_BUFFER[64] = GyroData[2];
 8000a42:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a44:	789a      	ldrb	r2, [r3, #2]
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			TX_BUFFER[65] = GyroData[3];
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a4e:	78da      	ldrb	r2, [r3, #3]
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			TX_BUFFER[66] = GyroData[4];
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a58:	791a      	ldrb	r2, [r3, #4]
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			TX_BUFFER[67] = GyroData[5];
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a62:	795a      	ldrb	r2, [r3, #5]
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			TX_BUFFER[68] = GyroData[6];
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a6c:	799a      	ldrb	r2, [r3, #6]
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			TX_BUFFER[69] = GyroData[7];
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a76:	79da      	ldrb	r2, [r3, #7]
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if (GyroData[1] == 0x34) // gyro
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	2b34      	cmp	r3, #52	; 0x34
 8000a84:	d11d      	bne.n	8000ac2 <HAL_CAN_RxFifo0MsgPendingCallback+0x412>
			TX_BUFFER[70] = GyroData[2];
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a88:	789a      	ldrb	r2, [r3, #2]
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			TX_BUFFER[71] = GyroData[3];
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a92:	78da      	ldrb	r2, [r3, #3]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000a96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			TX_BUFFER[72] = GyroData[4];
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000a9c:	791a      	ldrb	r2, [r3, #4]
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			TX_BUFFER[73] = GyroData[5];
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000aa6:	795a      	ldrb	r2, [r3, #5]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000aaa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			TX_BUFFER[74] = GyroData[6];
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000ab0:	799a      	ldrb	r2, [r3, #6]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000ab4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			TX_BUFFER[75] = GyroData[7];
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000aba:	79da      	ldrb	r2, [r3, #7]
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000abe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		if (GyroData[1] == 0x35) // ang
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	2b35      	cmp	r3, #53	; 0x35
 8000ac8:	d11d      	bne.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x456>
			TX_BUFFER[76] = GyroData[2];
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000acc:	789a      	ldrb	r2, [r3, #2]
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			TX_BUFFER[77] = GyroData[3];
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000ad6:	78da      	ldrb	r2, [r3, #3]
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000ada:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			TX_BUFFER[78] = GyroData[4];
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000ae0:	791a      	ldrb	r2, [r3, #4]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000ae4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			TX_BUFFER[79] = GyroData[5];
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000aea:	795a      	ldrb	r2, [r3, #5]
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000aee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			TX_BUFFER[80] = GyroData[6];
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000af4:	799a      	ldrb	r2, [r3, #6]
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			TX_BUFFER[81] = GyroData[7];
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8000afe:	79da      	ldrb	r2, [r3, #7]
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8000b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		break;
 8000b06:	bf00      	nop
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000ac 	.word	0x200000ac
 8000b14:	200000bc 	.word	0x200000bc
 8000b18:	200000b4 	.word	0x200000b4

08000b1c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a52      	ldr	r2, [pc, #328]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a4c      	ldr	r2, [pc, #304]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a46      	ldr	r2, [pc, #280]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2108      	movs	r1, #8
 8000b96:	483b      	ldr	r0, [pc, #236]	; (8000c84 <MX_GPIO_Init+0x168>)
 8000b98:	f001 fb66 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f001 fb60 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	4836      	ldr	r0, [pc, #216]	; (8000c88 <MX_GPIO_Init+0x16c>)
 8000bae:	f001 fb5b 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482e      	ldr	r0, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x168>)
 8000bca:	f001 f9d3 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = set_reset_Pin;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(set_reset_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4828      	ldr	r0, [pc, #160]	; (8000c84 <MX_GPIO_Init+0x168>)
 8000be2:	f001 f9c7 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = output_Pin;
 8000be6:	2308      	movs	r3, #8
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(output_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4821      	ldr	r0, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x168>)
 8000bfe:	f001 f9b9 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMD_STAT_Pin;
 8000c02:	2301      	movs	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMD_STAT_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f001 f9ac 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f001 f99b 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 f98c 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_GPIO_Init+0x16c>)
 8000c74:	f001 f97e 	bl	8001f74 <HAL_GPIO_Init>

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000400 	.word	0x48000400

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 fa72 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f814 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f7ff ff40 	bl	8000b1c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c9c:	f7ff fc1c 	bl	80004d8 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000ca0:	f000 f9b4 	bl	800100c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000ca4:	f000 f940 	bl	8000f28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	CAN_RX_Header_defunc();
 8000ca8:	f7ff fca0 	bl	80005ec <CAN_RX_Header_defunc>
	CAN_TX_Header_defunc();
 8000cac:	f7ff fcc6 	bl	800063c <CAN_TX_Header_defunc>
	CAN_Error_Handler();
 8000cb0:	f7ff fcdc 	bl	800066c <CAN_Error_Handler>
	HAL_TIM_Base_Start_IT(&htim2);
 8000cb4:	4801      	ldr	r0, [pc, #4]	; (8000cbc <main+0x30>)
 8000cb6:	f002 fd41 	bl	800373c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0x2e>
 8000cbc:	20000120 	.word	0x20000120

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b096      	sub	sp, #88	; 0x58
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2244      	movs	r2, #68	; 0x44
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fe70 	bl	80049b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ce2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ce6:	f001 fae5 	bl	80022b4 <HAL_PWREx_ControlVoltageScaling>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cf0:	f000 f896 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfe:	2340      	movs	r3, #64	; 0x40
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d06:	2302      	movs	r3, #2
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d12:	2307      	movs	r3, #7
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fb1c 	bl	8002360 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d2e:	f000 f877 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2303      	movs	r3, #3
 8000d38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 ff1c 	bl	8002b88 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d56:	f000 f863 	bl	8000e20 <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3758      	adds	r7, #88	; 0x58
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // bluetooth sending
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(TX_BUFFER[56] == 6 && Current_VSM_State != 6) // rtds code
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d11d      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d019      	beq.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d84:	f001 fa70 	bl	8002268 <HAL_GPIO_WritePin>
		RTDS_count++;
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d92:	701a      	strb	r2, [r3, #0]
		if(RTDS_count > 150){
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b96      	cmp	r3, #150	; 0x96
 8000d9a:	d90a      	bls.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4819      	ldr	r0, [pc, #100]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000da2:	f001 fa61 	bl	8002268 <HAL_GPIO_WritePin>
			Current_VSM_State = 6;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000da8:	2206      	movs	r2, #6
 8000daa:	701a      	strb	r2, [r3, #0]
			RTDS_count = 0;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
		}

	}
	if(TX_BUFFER[56] != 6 && Current_VSM_State == 6){
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d006      	beq.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x66>
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d102      	bne.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x66>
		Current_VSM_State = 0;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
	}

	users_count++;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dd2:	6013      	str	r3, [r2, #0]

	if (htim->Instance == htim2.Instance)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d10a      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		HAL_UART_Transmit(&huart1, TX_BUFFER, BUFFER_LEN, 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2258      	movs	r2, #88	; 0x58
 8000de4:	4906      	ldr	r1, [pc, #24]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000de8:	f003 f8f6 	bl	8003fd8 <HAL_UART_Transmit>
		TX_count++;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000df4:	6013      	str	r3, [r2, #0]
	}
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000bc 	.word	0x200000bc
 8000e04:	2000011d 	.word	0x2000011d
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	2000011c 	.word	0x2000011c
 8000e10:	20000118 	.word	0x20000118
 8000e14:	20000120 	.word	0x20000120
 8000e18:	2000016c 	.word	0x2000016c
 8000e1c:	20000114 	.word	0x20000114

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_MspInit+0x44>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <HAL_MspInit+0x44>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_MspInit+0x44>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//callbackSystick();

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f9b6 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <CAN1_RX0_IRQHandler+0x10>)
 8000ece:	f000 fd10 	bl	80018f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000028 	.word	0x20000028

08000edc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <CAN1_RX1_IRQHandler+0x10>)
 8000ee2:	f000 fd06 	bl	80018f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000028 	.word	0x20000028

08000ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM2_IRQHandler+0x10>)
 8000ef6:	f002 fc7d 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000120 	.word	0x20000120

08000f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1999;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f50:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f72:	f002 fb8b 	bl	800368c <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f7ff ff50 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8e:	f002 fd50 	bl	8003a32 <HAL_TIM_ConfigClockSource>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f98:	f7ff ff42 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000faa:	f002 ff3b 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f7ff ff34 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000120 	.word	0x20000120

08000fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d113      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_TIM_Base_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_TIM_Base_MspInit+0x44>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	201c      	movs	r0, #28
 8000ff4:	f000 ff87 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff8:	201c      	movs	r0, #28
 8000ffa:	f000 ffa0 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_USART1_UART_Init+0x5c>)
 8001014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART1_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART1_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART1_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001050:	f002 ff74 	bl	8003f3c <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f7ff fee1 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000016c 	.word	0x2000016c
 8001068:	40013800 	.word	0x40013800

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0a4      	sub	sp, #144	; 0x90
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2268      	movs	r2, #104	; 0x68
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fc91 	bl	80049b4 <memset>
  if(uartHandle->Instance==USART1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a21      	ldr	r2, [pc, #132]	; (800111c <HAL_UART_MspInit+0xb0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d13b      	bne.n	8001114 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 ff91 	bl	8002fd0 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b4:	f7ff feb4 	bl	8000e20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6613      	str	r3, [r2, #96]	; 0x60
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_UART_MspInit+0xb4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001100:	2307      	movs	r3, #7
 8001102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 ff30 	bl	8001f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	3790      	adds	r7, #144	; 0x90
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013800 	.word	0x40013800
 8001120:	40021000 	.word	0x40021000

08001124 <Reset_Handler>:
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopForever+0x2>
 8001128:	f7ff feec 	bl	8000f04 <SystemInit>
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopForever+0x6>)
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopForever+0xa>)
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopForever+0xe>)
 8001132:	2300      	movs	r3, #0
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:
 8001136:	58d4      	ldr	r4, [r2, r3]
 8001138:	50c4      	str	r4, [r0, r3]
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:
 800113c:	18c4      	adds	r4, r0, r3
 800113e:	428c      	cmp	r4, r1
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopForever+0x12>)
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopForever+0x16>)
 8001146:	2300      	movs	r3, #0
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:
 800114e:	42a2      	cmp	r2, r4
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>
 8001152:	f003 fc0b 	bl	800496c <__libc_init_array>
 8001156:	f7ff fd99 	bl	8000c8c <main>

0800115a <LoopForever>:
 800115a:	e7fe      	b.n	800115a <LoopForever>
 800115c:	20028000 	.word	0x20028000
 8001160:	20000000 	.word	0x20000000
 8001164:	2000000c 	.word	0x2000000c
 8001168:	08004a34 	.word	0x08004a34
 800116c:	2000000c 	.word	0x2000000c
 8001170:	200001f4 	.word	0x200001f4

08001174 <ADC1_IRQHandler>:
 8001174:	e7fe      	b.n	8001174 <ADC1_IRQHandler>
	...

08001178 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_Init+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_Init+0x3c>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118e:	2003      	movs	r0, #3
 8001190:	f000 feae 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f80f 	bl	80011b8 <HAL_InitTick>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	e001      	b.n	80011aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a6:	f7ff fe41 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d023      	beq.n	8001214 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_InitTick+0x70>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 feb9 	bl	8001f5a <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d809      	bhi.n	8001208 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 fe83 	bl	8001f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0x74>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e007      	b.n	8001218 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e004      	b.n	8001218 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e001      	b.n	8001218 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	200001f0 	.word	0x200001f0

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200001f0 	.word	0x200001f0

08001270 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0ed      	b.n	800145e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff f958 	bl	8000544 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a4:	f7ff ffd8 	bl	8001258 <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012aa:	e012      	b.n	80012d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ac:	f7ff ffd4 	bl	8001258 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b0a      	cmp	r3, #10
 80012b8:	d90b      	bls.n	80012d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2205      	movs	r2, #5
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e0c5      	b.n	800145e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0e5      	beq.n	80012ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0202 	bic.w	r2, r2, #2
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f0:	f7ff ffb2 	bl	8001258 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f6:	e012      	b.n	800131e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f8:	f7ff ffae 	bl	8001258 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b0a      	cmp	r3, #10
 8001304:	d90b      	bls.n	800131e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2205      	movs	r2, #5
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e09f      	b.n	800145e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e5      	bne.n	80012f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e1b      	ldrb	r3, [r3, #24]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e007      	b.n	8001356 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e5b      	ldrb	r3, [r3, #25]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e007      	b.n	8001380 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800137e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e9b      	ldrb	r3, [r3, #26]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d108      	bne.n	800139a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0220 	orr.w	r2, r2, #32
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e007      	b.n	80013aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0220 	bic.w	r2, r2, #32
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7edb      	ldrb	r3, [r3, #27]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0210 	bic.w	r2, r2, #16
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e007      	b.n	80013d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0210 	orr.w	r2, r2, #16
 80013d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7f1b      	ldrb	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d108      	bne.n	80013ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0208 	orr.w	r2, r2, #8
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e007      	b.n	80013fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0208 	bic.w	r2, r2, #8
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7f5b      	ldrb	r3, [r3, #29]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0204 	orr.w	r2, r2, #4
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e007      	b.n	8001428 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0204 	bic.w	r2, r2, #4
 8001426:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	ea42 0103 	orr.w	r1, r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001466:	b480      	push	{r7}
 8001468:	b087      	sub	sp, #28
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d003      	beq.n	800148c <HAL_CAN_ConfigFilter+0x26>
 8001484:	7cfb      	ldrb	r3, [r7, #19]
 8001486:	2b02      	cmp	r3, #2
 8001488:	f040 80aa 	bne.w	80015e0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2201      	movs	r2, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d123      	bne.n	800150e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3248      	adds	r2, #72	; 0x48
 80014ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001502:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001504:	6979      	ldr	r1, [r7, #20]
 8001506:	3348      	adds	r3, #72	; 0x48
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d122      	bne.n	800155c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001536:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3248      	adds	r2, #72	; 0x48
 800153c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001550:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001552:	6979      	ldr	r1, [r7, #20]
 8001554:	3348      	adds	r3, #72	; 0x48
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d109      	bne.n	8001578 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43db      	mvns	r3, r3
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001576:	e007      	b.n	8001588 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	431a      	orrs	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d109      	bne.n	80015a4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015a2:	e007      	b.n	80015b4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015d2:	f023 0201 	bic.w	r2, r3, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e006      	b.n	80015ee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
  }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d12e      	bne.n	800166c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001626:	f7ff fe17 	bl	8001258 <HAL_GetTick>
 800162a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800162c:	e012      	b.n	8001654 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800162e:	f7ff fe13 	bl	8001258 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b0a      	cmp	r3, #10
 800163a:	d90b      	bls.n	8001654 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2205      	movs	r2, #5
 800164c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e012      	b.n	800167a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1e5      	bne.n	800162e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	e006      	b.n	800167a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001682:	b480      	push	{r7}
 8001684:	b087      	sub	sp, #28
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001696:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d003      	beq.n	80016a6 <HAL_CAN_GetRxMessage+0x24>
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 80f3 	bne.w	800188c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10e      	bne.n	80016ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d116      	bne.n	80016e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0e7      	b.n	800189a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d107      	bne.n	80016e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0d8      	b.n	800189a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	331b      	adds	r3, #27
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4413      	add	r3, r2
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0204 	and.w	r2, r3, #4
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	331b      	adds	r3, #27
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0d5b      	lsrs	r3, r3, #21
 8001716:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e00b      	b.n	8001738 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	331b      	adds	r3, #27
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	331b      	adds	r3, #27
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0202 	and.w	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	331b      	adds	r3, #27
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 020f 	and.w	r2, r3, #15
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	331b      	adds	r3, #27
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	b2da      	uxtb	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	331b      	adds	r3, #27
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0c1b      	lsrs	r3, r3, #16
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0a1a      	lsrs	r2, r3, #8
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0c1a      	lsrs	r2, r3, #16
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3302      	adds	r3, #2
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0e1a      	lsrs	r2, r3, #24
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3303      	adds	r3, #3
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3304      	adds	r3, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0a1a      	lsrs	r2, r3, #8
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3305      	adds	r3, #5
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0c1a      	lsrs	r2, r3, #16
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3306      	adds	r3, #6
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e1a      	lsrs	r2, r3, #24
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3307      	adds	r3, #7
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0220 	orr.w	r2, r2, #32
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	e007      	b.n	8001888 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0220 	orr.w	r2, r2, #32
 8001886:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	e006      	b.n	800189a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d002      	beq.n	80018c4 <HAL_CAN_ActivateNotification+0x1e>
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d109      	bne.n	80018d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6959      	ldr	r1, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	e006      	b.n	80018e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
  }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b08a      	sub	sp, #40	; 0x28
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d07c      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d023      	beq.n	800198a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f983 	bl	8001c60 <HAL_CAN_TxMailbox0CompleteCallback>
 800195a:	e016      	b.n	800198a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	e00c      	b.n	800198a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e002      	b.n	800198a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f989 	bl	8001c9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d024      	beq.n	80019de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f963 	bl	8001c74 <HAL_CAN_TxMailbox1CompleteCallback>
 80019ae:	e016      	b.n	80019de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	e00c      	b.n	80019de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	e002      	b.n	80019de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f969 	bl	8001cb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d024      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f943 	bl	8001c88 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a02:	e016      	b.n	8001a32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	e00c      	b.n	8001a32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	e002      	b.n	8001a32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f949 	bl	8001cc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f930 	bl	8001cd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe fe0d 	bl	80006b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f912 	bl	8001d00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8f9 	bl	8001cec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2210      	movs	r2, #16
 8001b14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8fc 	bl	8001d14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2208      	movs	r2, #8
 8001b36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f8f5 	bl	8001d28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d07b      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d072      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d043      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03e      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bc0:	2b60      	cmp	r3, #96	; 0x60
 8001bc2:	d02b      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x32a>
 8001bc4:	2b60      	cmp	r3, #96	; 0x60
 8001bc6:	d82e      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001bc8:	2b50      	cmp	r3, #80	; 0x50
 8001bca:	d022      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x320>
 8001bcc:	2b50      	cmp	r3, #80	; 0x50
 8001bce:	d82a      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d019      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x316>
 8001bd4:	2b40      	cmp	r3, #64	; 0x40
 8001bd6:	d826      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001bd8:	2b30      	cmp	r3, #48	; 0x30
 8001bda:	d010      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x30c>
 8001bdc:	2b30      	cmp	r3, #48	; 0x30
 8001bde:	d822      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d002      	beq.n	8001bea <HAL_CAN_IRQHandler+0x2f8>
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d005      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001be8:	e01d      	b.n	8001c26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf2:	e019      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfc:	e014      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c06:	e00f      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c10:	e00a      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1a:	e005      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c24:	e000      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f872 	bl	8001d3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	e154      	b.n	800222e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8146 	beq.w	8002228 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x40>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d130      	bne.n	8002016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fea:	2201      	movs	r2, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0201 	and.w	r2, r3, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80a0 	beq.w	8002228 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_GPIO_Init+0x2d8>)
 80020ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ec:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_GPIO_Init+0x2d8>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6613      	str	r3, [r2, #96]	; 0x60
 80020f4:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_GPIO_Init+0x2d8>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002100:	4a53      	ldr	r2, [pc, #332]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800212a:	d019      	beq.n	8002160 <HAL_GPIO_Init+0x1ec>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_GPIO_Init+0x2e0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x1e8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_GPIO_Init+0x2e4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1e4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a47      	ldr	r2, [pc, #284]	; (800225c <HAL_GPIO_Init+0x2e8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a46      	ldr	r2, [pc, #280]	; (8002260 <HAL_GPIO_Init+0x2ec>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1dc>
 800214c:	2304      	movs	r3, #4
 800214e:	e008      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002150:	2307      	movs	r3, #7
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002154:	2303      	movs	r3, #3
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002158:	2302      	movs	r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002160:	2300      	movs	r3, #0
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002172:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_GPIO_Init+0x2dc>)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002180:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_GPIO_Init+0x2f0>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f aea3 	bne.w	8001f84 <HAL_GPIO_Init+0x10>
  }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	48000c00 	.word	0x48000c00
 8002260:	48001000 	.word	0x48001000
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002284:	e002      	b.n	800228c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40007000 	.word	0x40007000

080022b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c2:	d130      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d0:	d038      	beq.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022da:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2232      	movs	r2, #50	; 0x32
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0c9b      	lsrs	r3, r3, #18
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f8:	e002      	b.n	8002300 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230c:	d102      	bne.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x60>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f2      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002320:	d110      	bne.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e00f      	b.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002332:	d007      	beq.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800233c:	4a05      	ldr	r2, [pc, #20]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002342:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40007000 	.word	0x40007000
 8002358:	20000000 	.word	0x20000000
 800235c:	431bde83 	.word	0x431bde83

08002360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	f000 bc02 	b.w	8002b78 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002374:	4b96      	ldr	r3, [pc, #600]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237e:	4b94      	ldr	r3, [pc, #592]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80e4 	beq.w	800255e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_RCC_OscConfig+0x4c>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	f040 808b 	bne.w	80024ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 8087 	bne.w	80024ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ac:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_OscConfig+0x64>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e3d9      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <HAL_RCC_OscConfig+0x7e>
 80023d4:	4b7e      	ldr	r3, [pc, #504]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023dc:	e005      	b.n	80023ea <HAL_RCC_OscConfig+0x8a>
 80023de:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d223      	bcs.n	8002436 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fd8c 	bl	8002f10 <RCC_SetFlashLatencyFromMSIRange>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e3ba      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002402:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a72      	ldr	r2, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	496d      	ldr	r1, [pc, #436]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002420:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	4968      	ldr	r1, [pc, #416]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e025      	b.n	8002482 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002436:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a65      	ldr	r2, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800243c:	f043 0308 	orr.w	r3, r3, #8
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4960      	ldr	r1, [pc, #384]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	495b      	ldr	r1, [pc, #364]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fd4c 	bl	8002f10 <RCC_SetFlashLatencyFromMSIRange>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e37a      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002482:	f000 fc81 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	4950      	ldr	r1, [pc, #320]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a4e      	ldr	r2, [pc, #312]	; (80025d8 <HAL_RCC_OscConfig+0x278>)
 80024a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024a2:	4b4e      	ldr	r3, [pc, #312]	; (80025dc <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fe86 	bl	80011b8 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d052      	beq.n	800255c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	e35e      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d032      	beq.n	8002528 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fec3 	bl	8001258 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d6:	f7fe febf 	bl	8001258 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e347      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a35      	ldr	r2, [pc, #212]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4930      	ldr	r1, [pc, #192]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	492b      	ldr	r1, [pc, #172]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
 8002526:	e01a      	b.n	800255e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a28      	ldr	r2, [pc, #160]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002534:	f7fe fe90 	bl	8001258 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800253c:	f7fe fe8c 	bl	8001258 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e314      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x1dc>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d073      	beq.n	8002652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d005      	beq.n	800257c <HAL_RCC_OscConfig+0x21c>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d10e      	bne.n	8002594 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d10b      	bne.n	8002594 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d063      	beq.n	8002650 <HAL_RCC_OscConfig+0x2f0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d15f      	bne.n	8002650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e2f1      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x24c>
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0b      	ldr	r2, [pc, #44]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e025      	b.n	80025f8 <HAL_RCC_OscConfig+0x298>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b4:	d114      	bne.n	80025e0 <HAL_RCC_OscConfig+0x280>
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e013      	b.n	80025f8 <HAL_RCC_OscConfig+0x298>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080049dc 	.word	0x080049dc
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004
 80025e0:	4ba0      	ldr	r3, [pc, #640]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a9f      	ldr	r2, [pc, #636]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b9d      	ldr	r3, [pc, #628]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a9c      	ldr	r2, [pc, #624]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fe2a 	bl	8001258 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fe26 	bl	8001258 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e2ae      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261a:	4b92      	ldr	r3, [pc, #584]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x2a8>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fe16 	bl	8001258 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fe12 	bl	8001258 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e29a      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002642:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x2d0>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d060      	beq.n	8002720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x310>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d119      	bne.n	800269e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d116      	bne.n	800269e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002670:	4b7c      	ldr	r3, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_OscConfig+0x328>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e277      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b76      	ldr	r3, [pc, #472]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	4973      	ldr	r1, [pc, #460]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269c:	e040      	b.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d023      	beq.n	80026ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a6:	4b6f      	ldr	r3, [pc, #444]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6e      	ldr	r2, [pc, #440]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe fdd1 	bl	8001258 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7fe fdcd 	bl	8001258 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e255      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026cc:	4b65      	ldr	r3, [pc, #404]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b62      	ldr	r3, [pc, #392]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	495f      	ldr	r1, [pc, #380]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
 80026ec:	e018      	b.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a5c      	ldr	r2, [pc, #368]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80026f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fdad 	bl	8001258 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002702:	f7fe fda9 	bl	8001258 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e231      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d03c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01c      	beq.n	800276e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273a:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fd88 	bl	8001258 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe fd84 	bl	8001258 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e20c      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ef      	beq.n	800274c <HAL_RCC_OscConfig+0x3ec>
 800276c:	e01b      	b.n	80027a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002774:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fd6b 	bl	8001258 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fd67 	bl	8001258 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1ef      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ef      	bne.n	8002786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80a6 	beq.w	8002900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b8:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_RCC_OscConfig+0x508>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d118      	bne.n	800281e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCC_OscConfig+0x508>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_RCC_OscConfig+0x508>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f8:	f7fe fd2e 	bl	8001258 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fe fd2a 	bl	8001258 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1b2      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x508>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x4d8>
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002836:	e029      	b.n	800288c <HAL_RCC_OscConfig+0x52c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d115      	bne.n	800286c <HAL_RCC_OscConfig+0x50c>
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a03      	ldr	r2, [pc, #12]	; (8002864 <HAL_RCC_OscConfig+0x504>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x52c>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	40007000 	.word	0x40007000
 800286c:	4b9a      	ldr	r3, [pc, #616]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	4a99      	ldr	r2, [pc, #612]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	4a95      	ldr	r2, [pc, #596]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d016      	beq.n	80028c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002894:	f7fe fce0 	bl	8001258 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fcdc 	bl	8001258 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e162      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	4b89      	ldr	r3, [pc, #548]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ed      	beq.n	800289c <HAL_RCC_OscConfig+0x53c>
 80028c0:	e015      	b.n	80028ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fe fcc9 	bl	8001258 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe fcc5 	bl	8001258 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e14b      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e0:	4b7d      	ldr	r3, [pc, #500]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1ed      	bne.n	80028ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f4:	4b78      	ldr	r3, [pc, #480]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 80028fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d03c      	beq.n	8002986 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01c      	beq.n	800294e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002914:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fc98 	bl	8001258 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292c:	f7fe fc94 	bl	8001258 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e11c      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ef      	beq.n	800292c <HAL_RCC_OscConfig+0x5cc>
 800294c:	e01b      	b.n	8002986 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002954:	4a60      	ldr	r2, [pc, #384]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fc7b 	bl	8001258 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002966:	f7fe fc77 	bl	8001258 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0ff      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 800297a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ef      	bne.n	8002966 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80f3 	beq.w	8002b76 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	2b02      	cmp	r3, #2
 8002996:	f040 80c9 	bne.w	8002b2c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800299a:	4b4f      	ldr	r3, [pc, #316]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d12c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	3b01      	subs	r3, #1
 80029ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d123      	bne.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d11b      	bne.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d113      	bne.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d109      	bne.n	8002a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d06b      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d062      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0ac      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a2a:	f7fe fc15 	bl	8001258 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fc11 	bl	8001258 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e099      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x77c>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a6a:	0212      	lsls	r2, r2, #8
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0552      	lsls	r2, r2, #21
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a7e:	0852      	lsrs	r2, r2, #1
 8002a80:	3a01      	subs	r2, #1
 8002a82:	0652      	lsls	r2, r2, #25
 8002a84:	4311      	orrs	r1, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a8a:	06d2      	lsls	r2, r2, #27
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4912      	ldr	r1, [pc, #72]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aac:	f7fe fbd4 	bl	8001258 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fbd0 	bl	8001258 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e058      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_OscConfig+0x778>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad2:	e050      	b.n	8002b76 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04f      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d144      	bne.n	8002b76 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b04:	f7fe fba8 	bl	8001258 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fba4 	bl	8001258 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e02c      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x7ac>
 8002b2a:	e024      	b.n	8002b76 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d01f      	beq.n	8002b72 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb8b 	bl	8001258 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fb87 	bl	8001258 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e00f      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4905      	ldr	r1, [pc, #20]	; (8002b80 <HAL_RCC_OscConfig+0x820>)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_OscConfig+0x824>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
 8002b70:	e001      	b.n	8002b76 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	feeefffc 	.word	0xfeeefffc

08002b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0e7      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d910      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0207 	bic.w	r2, r3, #7
 8002bb2:	4970      	ldr	r1, [pc, #448]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b6e      	ldr	r3, [pc, #440]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cf      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d908      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4960      	ldr	r1, [pc, #384]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04c      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d121      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0a6      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d115      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e09a      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e08e      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e086      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4943      	ldr	r1, [pc, #268]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c70:	f7fe faf2 	bl	8001258 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe faee 	bl	8001258 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e06e      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d208      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	492b      	ldr	r1, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d210      	bcs.n	8002cfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 0207 	bic.w	r2, r3, #7
 8002ce4:	4923      	ldr	r1, [pc, #140]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_ClockConfig+0x1ec>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e036      	b.n	8002d6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4918      	ldr	r1, [pc, #96]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d009      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4910      	ldr	r1, [pc, #64]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3c:	f000 f824 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	490b      	ldr	r1, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1f4>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1fc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fa29 	bl	80011b8 <HAL_InitTick>
 8002d66:	4603      	mov	r3, r0
 8002d68:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	080049dc 	.word	0x080049dc
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d121      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d11e      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e005      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	e004      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d134      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0xac>
 8002e2c:	e005      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e36:	617b      	str	r3, [r7, #20]
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	617b      	str	r3, [r7, #20]
      break;
 8002e3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	fb03 f202 	mul.w	r2, r3, r2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	0e5b      	lsrs	r3, r3, #25
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	3301      	adds	r3, #1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e80:	69bb      	ldr	r3, [r7, #24]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	080049f4 	.word	0x080049f4
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	080049ec 	.word	0x080049ec

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ee8:	f7ff ffda 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0adb      	lsrs	r3, r3, #11
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4904      	ldr	r1, [pc, #16]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	080049ec 	.word	0x080049ec

08002f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f28:	f7ff f9b6 	bl	8002298 <HAL_PWREx_GetVoltageRange>
 8002f2c:	6178      	str	r0, [r7, #20]
 8002f2e:	e014      	b.n	8002f5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f48:	f7ff f9a6 	bl	8002298 <HAL_PWREx_GetVoltageRange>
 8002f4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f60:	d10b      	bne.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	d919      	bls.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f6c:	d902      	bls.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f6e:	2302      	movs	r3, #2
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e013      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f74:	2301      	movs	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e010      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d902      	bls.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f80:	2303      	movs	r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e00a      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d102      	bne.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e004      	b.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b70      	cmp	r3, #112	; 0x70
 8002f96:	d101      	bne.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f98:	2301      	movs	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 0207 	bic.w	r2, r3, #7
 8002fa4:	4909      	ldr	r1, [pc, #36]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40022000 	.word	0x40022000

08002fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd8:	2300      	movs	r3, #0
 8002fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fdc:	2300      	movs	r3, #0
 8002fde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d031      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ff4:	d01a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ff6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ffa:	d814      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003000:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003004:	d10f      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4a5c      	ldr	r2, [pc, #368]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003012:	e00c      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fa44 	bl	80034a8 <RCCEx_PLLSAI1_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003024:	e003      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	74fb      	strb	r3, [r7, #19]
      break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800302c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003034:	4b51      	ldr	r3, [pc, #324]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	494e      	ldr	r1, [pc, #312]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800304a:	e001      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 809e 	beq.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003062:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003072:	2300      	movs	r3, #0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	4b40      	ldr	r3, [pc, #256]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	4a3f      	ldr	r2, [pc, #252]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6593      	str	r3, [r2, #88]	; 0x58
 8003084:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003090:	2301      	movs	r3, #1
 8003092:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a39      	ldr	r2, [pc, #228]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a0:	f7fe f8da 	bl	8001258 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030a6:	e009      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe f8d6 	bl	8001258 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ba:	e005      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d15a      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ce:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01e      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d019      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003116:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f896 	bl	8001258 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	e00b      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe f892 	bl	8001258 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d902      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	74fb      	strb	r3, [r7, #19]
            break;
 8003146:	e006      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ec      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316a:	4904      	ldr	r1, [pc, #16]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003172:	e009      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	74bb      	strb	r3, [r7, #18]
 8003178:	e006      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003188:	7c7b      	ldrb	r3, [r7, #17]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a9d      	ldr	r2, [pc, #628]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a6:	4b98      	ldr	r3, [pc, #608]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f023 0203 	bic.w	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4994      	ldr	r1, [pc, #592]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c8:	4b8f      	ldr	r3, [pc, #572]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 020c 	bic.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	498c      	ldr	r1, [pc, #560]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ea:	4b87      	ldr	r3, [pc, #540]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	4983      	ldr	r1, [pc, #524]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800320c:	4b7e      	ldr	r3, [pc, #504]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	497b      	ldr	r1, [pc, #492]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4972      	ldr	r1, [pc, #456]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	496a      	ldr	r1, [pc, #424]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003272:	4b65      	ldr	r3, [pc, #404]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	4961      	ldr	r1, [pc, #388]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003294:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	4959      	ldr	r1, [pc, #356]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	4950      	ldr	r1, [pc, #320]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032d8:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4948      	ldr	r1, [pc, #288]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032fa:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003300:	f023 0203 	bic.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	493f      	ldr	r1, [pc, #252]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d028      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800331c:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333a:	d106      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a31      	ldr	r2, [pc, #196]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003346:	60d3      	str	r3, [r2, #12]
 8003348:	e011      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003352:	d10c      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2101      	movs	r1, #1
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f8a4 	bl	80034a8 <RCCEx_PLLSAI1_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d028      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800337a:	4b23      	ldr	r3, [pc, #140]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	491f      	ldr	r1, [pc, #124]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003398:	d106      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a4:	60d3      	str	r3, [r2, #12]
 80033a6:	e011      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2101      	movs	r1, #1
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f875 	bl	80034a8 <RCCEx_PLLSAI1_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f6:	d109      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a02      	ldr	r2, [pc, #8]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003402:	60d3      	str	r3, [r2, #12]
 8003404:	e014      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003414:	d10c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f843 	bl	80034a8 <RCCEx_PLLSAI1_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01c      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	4916      	ldr	r1, [pc, #88]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345a:	d10c      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f820 	bl	80034a8 <RCCEx_PLLSAI1_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003490:	4904      	ldr	r1, [pc, #16]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003498:	7cbb      	ldrb	r3, [r7, #18]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000

080034a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034b6:	4b74      	ldr	r3, [pc, #464]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034c2:	4b71      	ldr	r3, [pc, #452]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d10d      	bne.n	80034ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
       ||
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034da:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
       ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d047      	beq.n	800357e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	e044      	b.n	800357e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d018      	beq.n	800352e <RCCEx_PLLSAI1_Config+0x86>
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d825      	bhi.n	800354c <RCCEx_PLLSAI1_Config+0xa4>
 8003500:	2b01      	cmp	r3, #1
 8003502:	d002      	beq.n	800350a <RCCEx_PLLSAI1_Config+0x62>
 8003504:	2b02      	cmp	r3, #2
 8003506:	d009      	beq.n	800351c <RCCEx_PLLSAI1_Config+0x74>
 8003508:	e020      	b.n	800354c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11d      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351a:	e01a      	b.n	8003552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800351c:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	2b00      	cmp	r3, #0
 8003526:	d116      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800352c:	e013      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800352e:	4b56      	ldr	r3, [pc, #344]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800353a:	4b53      	ldr	r3, [pc, #332]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800354a:	e006      	b.n	800355a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      break;
 8003550:	e004      	b.n	800355c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355a:	bf00      	nop
    }

    if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003562:	4b49      	ldr	r3, [pc, #292]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	3b01      	subs	r3, #1
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	430b      	orrs	r3, r1
 8003578:	4943      	ldr	r1, [pc, #268]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d17c      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003584:	4b40      	ldr	r3, [pc, #256]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800358e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003590:	f7fd fe62 	bl	8001258 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003596:	e009      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003598:	f7fd fe5e 	bl	8001258 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d902      	bls.n	80035ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	73fb      	strb	r3, [r7, #15]
        break;
 80035aa:	e005      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ef      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d15f      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d110      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6892      	ldr	r2, [r2, #8]
 80035d4:	0211      	lsls	r1, r2, #8
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68d2      	ldr	r2, [r2, #12]
 80035da:	06d2      	lsls	r2, r2, #27
 80035dc:	430a      	orrs	r2, r1
 80035de:	492a      	ldr	r1, [pc, #168]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	610b      	str	r3, [r1, #16]
 80035e4:	e027      	b.n	8003636 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d112      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6892      	ldr	r2, [r2, #8]
 80035fc:	0211      	lsls	r1, r2, #8
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6912      	ldr	r2, [r2, #16]
 8003602:	0852      	lsrs	r2, r2, #1
 8003604:	3a01      	subs	r2, #1
 8003606:	0552      	lsls	r2, r2, #21
 8003608:	430a      	orrs	r2, r1
 800360a:	491f      	ldr	r1, [pc, #124]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800360c:	4313      	orrs	r3, r2
 800360e:	610b      	str	r3, [r1, #16]
 8003610:	e011      	b.n	8003636 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800361a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6892      	ldr	r2, [r2, #8]
 8003622:	0211      	lsls	r1, r2, #8
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6952      	ldr	r2, [r2, #20]
 8003628:	0852      	lsrs	r2, r2, #1
 800362a:	3a01      	subs	r2, #1
 800362c:	0652      	lsls	r2, r2, #25
 800362e:	430a      	orrs	r2, r1
 8003630:	4915      	ldr	r1, [pc, #84]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800363c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fd fe09 	bl	8001258 <HAL_GetTick>
 8003646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003648:	e009      	b.n	800365e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800364a:	f7fd fe05 	bl	8001258 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	73fb      	strb	r3, [r7, #15]
          break;
 800365c:	e005      	b.n	800366a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ef      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e049      	b.n	8003732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fc86 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 faa2 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e040      	b.n	80037d6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_TIM_Base_Start_IT+0xa8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d009      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_TIM_Base_Start_IT+0xac>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_TIM_Base_Start_IT+0xb0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d115      	bne.n	80037c0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d015      	beq.n	80037d2 <HAL_TIM_Base_Start_IT+0x96>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d011      	beq.n	80037d2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037be:	e008      	b.n	80037d2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e000      	b.n	80037d4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	00010007 	.word	0x00010007

080037f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d122      	bne.n	8003850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d11b      	bne.n	8003850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0202 	mvn.w	r2, #2
 8003820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9ce 	bl	8003bd8 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9c0 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f9d1 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d122      	bne.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d11b      	bne.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0204 	mvn.w	r2, #4
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9a4 	bl	8003bd8 <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f996 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f9a7 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0208 	mvn.w	r2, #8
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2204      	movs	r2, #4
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f97a 	bl	8003bd8 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f96c 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f97d 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b10      	cmp	r3, #16
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b10      	cmp	r3, #16
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0210 	mvn.w	r2, #16
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2208      	movs	r2, #8
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f950 	bl	8003bd8 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f942 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f953 	bl	8003bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0201 	mvn.w	r2, #1
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f9f6 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b80      	cmp	r3, #128	; 0x80
 8003984:	d10e      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d107      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fab8 	bl	8003f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b2:	d10e      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b80      	cmp	r3, #128	; 0x80
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 faab 	bl	8003f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f901 	bl	8003c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0220 	mvn.w	r2, #32
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fa6b 	bl	8003f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_ConfigClockSource+0x1c>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0b6      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x18a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	d03e      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xd8>
 8003a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a90:	f200 8087 	bhi.w	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	f000 8086 	beq.w	8003ba8 <HAL_TIM_ConfigClockSource+0x176>
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d87f      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003aa2:	2b70      	cmp	r3, #112	; 0x70
 8003aa4:	d01a      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0xaa>
 8003aa6:	2b70      	cmp	r3, #112	; 0x70
 8003aa8:	d87b      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003aaa:	2b60      	cmp	r3, #96	; 0x60
 8003aac:	d050      	beq.n	8003b50 <HAL_TIM_ConfigClockSource+0x11e>
 8003aae:	2b60      	cmp	r3, #96	; 0x60
 8003ab0:	d877      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003ab2:	2b50      	cmp	r3, #80	; 0x50
 8003ab4:	d03c      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xfe>
 8003ab6:	2b50      	cmp	r3, #80	; 0x50
 8003ab8:	d873      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	d058      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0x13e>
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d86f      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003ac2:	2b30      	cmp	r3, #48	; 0x30
 8003ac4:	d064      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x15e>
 8003ac6:	2b30      	cmp	r3, #48	; 0x30
 8003ac8:	d86b      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d060      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x15e>
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d867      	bhi.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d05c      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x15e>
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d05a      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x15e>
 8003ada:	e062      	b.n	8003ba2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f000 f97a 	bl	8003de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003afe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
      break;
 8003b08:	e04f      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 f963 	bl	8003de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b2c:	609a      	str	r2, [r3, #8]
      break;
 8003b2e:	e03c      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f000 f8d7 	bl	8003cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2150      	movs	r1, #80	; 0x50
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f930 	bl	8003dae <TIM_ITRx_SetConfig>
      break;
 8003b4e:	e02c      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f000 f8f6 	bl	8003d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2160      	movs	r1, #96	; 0x60
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f920 	bl	8003dae <TIM_ITRx_SetConfig>
      break;
 8003b6e:	e01c      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f000 f8b7 	bl	8003cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2140      	movs	r1, #64	; 0x40
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f910 	bl	8003dae <TIM_ITRx_SetConfig>
      break;
 8003b8e:	e00c      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 f907 	bl	8003dae <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e003      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba6:	e000      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ba8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <TIM_Base_SetConfig+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_Base_SetConfig+0x28>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0x28>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <TIM_Base_SetConfig+0xd0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d108      	bne.n	8003c4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <TIM_Base_SetConfig+0xcc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <TIM_Base_SetConfig+0xd0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <TIM_Base_SetConfig+0xd4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <TIM_Base_SetConfig+0xd8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a0c      	ldr	r2, [pc, #48]	; (8003ce0 <TIM_Base_SetConfig+0xcc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <TIM_Base_SetConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <TIM_Base_SetConfig+0xd4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0xb0>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <TIM_Base_SetConfig+0xd8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400

08003cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f023 030a 	bic.w	r3, r3, #10
 8003d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b087      	sub	sp, #28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0210 	bic.w	r2, r3, #16
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	031b      	lsls	r3, r3, #12
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f043 0307 	orr.w	r3, r3, #7
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e054      	b.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d009      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a11      	ldr	r2, [pc, #68]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40014000 	.word	0x40014000

08003f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e040      	b.n	8003fd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd f884 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2224      	movs	r2, #36	; 0x24
 8003f68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8c0 	bl	8004100 <UART_SetConfig>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e022      	b.n	8003fd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fb3a 	bl	800460c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fbc1 	bl	8004750 <UART_CheckIdleState>
 8003fce:	4603      	mov	r3, r0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	f040 8082 	bne.w	80040f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_UART_Transmit+0x26>
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07a      	b.n	80040f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_UART_Transmit+0x38>
 800400c:	2302      	movs	r3, #2
 800400e:	e073      	b.n	80040f8 <HAL_UART_Transmit+0x120>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2221      	movs	r2, #33	; 0x21
 8004024:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004026:	f7fd f917 	bl	8001258 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d108      	bne.n	8004058 <HAL_UART_Transmit+0x80>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e003      	b.n	8004060 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004068:	e02d      	b.n	80040c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fbb4 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e039      	b.n	80040f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004096:	b292      	uxth	r2, r2
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	3302      	adds	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	e008      	b.n	80040b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b292      	uxth	r2, r2
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1cb      	bne.n	800406a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb80 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e005      	b.n	80040f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b08a      	sub	sp, #40	; 0x28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	431a      	orrs	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	431a      	orrs	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	4313      	orrs	r3, r2
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4ba5      	ldr	r3, [pc, #660]	; (80043c4 <UART_SetConfig+0x2c4>)
 8004130:	4013      	ands	r3, r2
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004138:	430b      	orrs	r3, r1
 800413a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a9a      	ldr	r2, [pc, #616]	; (80043c8 <UART_SetConfig+0x2c8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	4313      	orrs	r3, r2
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	430a      	orrs	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a91      	ldr	r2, [pc, #580]	; (80043cc <UART_SetConfig+0x2cc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d126      	bne.n	80041d8 <UART_SetConfig+0xd8>
 800418a:	4b91      	ldr	r3, [pc, #580]	; (80043d0 <UART_SetConfig+0x2d0>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d81b      	bhi.n	80041d0 <UART_SetConfig+0xd0>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0xa0>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041c1 	.word	0x080041c1
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e0d6      	b.n	8004366 <UART_SetConfig+0x266>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e0d2      	b.n	8004366 <UART_SetConfig+0x266>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e0ce      	b.n	8004366 <UART_SetConfig+0x266>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e0ca      	b.n	8004366 <UART_SetConfig+0x266>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d6:	e0c6      	b.n	8004366 <UART_SetConfig+0x266>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a7d      	ldr	r2, [pc, #500]	; (80043d4 <UART_SetConfig+0x2d4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d138      	bne.n	8004254 <UART_SetConfig+0x154>
 80041e2:	4b7b      	ldr	r3, [pc, #492]	; (80043d0 <UART_SetConfig+0x2d0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b0c      	cmp	r3, #12
 80041ee:	d82d      	bhi.n	800424c <UART_SetConfig+0x14c>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0xf8>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800422d 	.word	0x0800422d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	0800424d 	.word	0x0800424d
 8004204:	0800424d 	.word	0x0800424d
 8004208:	0800423d 	.word	0x0800423d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800424d 	.word	0x0800424d
 8004220:	0800424d 	.word	0x0800424d
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004245 	.word	0x08004245
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e098      	b.n	8004366 <UART_SetConfig+0x266>
 8004234:	2302      	movs	r3, #2
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e094      	b.n	8004366 <UART_SetConfig+0x266>
 800423c:	2304      	movs	r3, #4
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e090      	b.n	8004366 <UART_SetConfig+0x266>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e08c      	b.n	8004366 <UART_SetConfig+0x266>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e088      	b.n	8004366 <UART_SetConfig+0x266>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <UART_SetConfig+0x2d8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d125      	bne.n	80042aa <UART_SetConfig+0x1aa>
 800425e:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <UART_SetConfig+0x2d0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004268:	2b30      	cmp	r3, #48	; 0x30
 800426a:	d016      	beq.n	800429a <UART_SetConfig+0x19a>
 800426c:	2b30      	cmp	r3, #48	; 0x30
 800426e:	d818      	bhi.n	80042a2 <UART_SetConfig+0x1a2>
 8004270:	2b20      	cmp	r3, #32
 8004272:	d00a      	beq.n	800428a <UART_SetConfig+0x18a>
 8004274:	2b20      	cmp	r3, #32
 8004276:	d814      	bhi.n	80042a2 <UART_SetConfig+0x1a2>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <UART_SetConfig+0x182>
 800427c:	2b10      	cmp	r3, #16
 800427e:	d008      	beq.n	8004292 <UART_SetConfig+0x192>
 8004280:	e00f      	b.n	80042a2 <UART_SetConfig+0x1a2>
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004288:	e06d      	b.n	8004366 <UART_SetConfig+0x266>
 800428a:	2302      	movs	r3, #2
 800428c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004290:	e069      	b.n	8004366 <UART_SetConfig+0x266>
 8004292:	2304      	movs	r3, #4
 8004294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004298:	e065      	b.n	8004366 <UART_SetConfig+0x266>
 800429a:	2308      	movs	r3, #8
 800429c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a0:	e061      	b.n	8004366 <UART_SetConfig+0x266>
 80042a2:	2310      	movs	r3, #16
 80042a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a8:	e05d      	b.n	8004366 <UART_SetConfig+0x266>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a4b      	ldr	r2, [pc, #300]	; (80043dc <UART_SetConfig+0x2dc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d125      	bne.n	8004300 <UART_SetConfig+0x200>
 80042b4:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <UART_SetConfig+0x2d0>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042be:	2bc0      	cmp	r3, #192	; 0xc0
 80042c0:	d016      	beq.n	80042f0 <UART_SetConfig+0x1f0>
 80042c2:	2bc0      	cmp	r3, #192	; 0xc0
 80042c4:	d818      	bhi.n	80042f8 <UART_SetConfig+0x1f8>
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d00a      	beq.n	80042e0 <UART_SetConfig+0x1e0>
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d814      	bhi.n	80042f8 <UART_SetConfig+0x1f8>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <UART_SetConfig+0x1d8>
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d008      	beq.n	80042e8 <UART_SetConfig+0x1e8>
 80042d6:	e00f      	b.n	80042f8 <UART_SetConfig+0x1f8>
 80042d8:	2300      	movs	r3, #0
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e042      	b.n	8004366 <UART_SetConfig+0x266>
 80042e0:	2302      	movs	r3, #2
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e03e      	b.n	8004366 <UART_SetConfig+0x266>
 80042e8:	2304      	movs	r3, #4
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e03a      	b.n	8004366 <UART_SetConfig+0x266>
 80042f0:	2308      	movs	r3, #8
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e036      	b.n	8004366 <UART_SetConfig+0x266>
 80042f8:	2310      	movs	r3, #16
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e032      	b.n	8004366 <UART_SetConfig+0x266>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <UART_SetConfig+0x2c8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d12a      	bne.n	8004360 <UART_SetConfig+0x260>
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <UART_SetConfig+0x2d0>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004318:	d01a      	beq.n	8004350 <UART_SetConfig+0x250>
 800431a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800431e:	d81b      	bhi.n	8004358 <UART_SetConfig+0x258>
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004324:	d00c      	beq.n	8004340 <UART_SetConfig+0x240>
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432a:	d815      	bhi.n	8004358 <UART_SetConfig+0x258>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <UART_SetConfig+0x238>
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d008      	beq.n	8004348 <UART_SetConfig+0x248>
 8004336:	e00f      	b.n	8004358 <UART_SetConfig+0x258>
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e012      	b.n	8004366 <UART_SetConfig+0x266>
 8004340:	2302      	movs	r3, #2
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e00e      	b.n	8004366 <UART_SetConfig+0x266>
 8004348:	2304      	movs	r3, #4
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e00a      	b.n	8004366 <UART_SetConfig+0x266>
 8004350:	2308      	movs	r3, #8
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e006      	b.n	8004366 <UART_SetConfig+0x266>
 8004358:	2310      	movs	r3, #16
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e002      	b.n	8004366 <UART_SetConfig+0x266>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <UART_SetConfig+0x2c8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	f040 808b 	bne.w	8004488 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004376:	2b08      	cmp	r3, #8
 8004378:	d834      	bhi.n	80043e4 <UART_SetConfig+0x2e4>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x280>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043e5 	.word	0x080043e5
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043e5 	.word	0x080043e5
 8004390:	080043b3 	.word	0x080043b3
 8004394:	080043e5 	.word	0x080043e5
 8004398:	080043e5 	.word	0x080043e5
 800439c:	080043e5 	.word	0x080043e5
 80043a0:	080043bb 	.word	0x080043bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe fd88 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
        break;
 80043aa:	e021      	b.n	80043f0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <UART_SetConfig+0x2e0>)
 80043ae:	61fb      	str	r3, [r7, #28]
        break;
 80043b0:	e01e      	b.n	80043f0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b2:	f7fe fce9 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80043b6:	61f8      	str	r0, [r7, #28]
        break;
 80043b8:	e01a      	b.n	80043f0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043be:	61fb      	str	r3, [r7, #28]
        break;
 80043c0:	e016      	b.n	80043f0 <UART_SetConfig+0x2f0>
 80043c2:	bf00      	nop
 80043c4:	efff69f3 	.word	0xefff69f3
 80043c8:	40008000 	.word	0x40008000
 80043cc:	40013800 	.word	0x40013800
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40004400 	.word	0x40004400
 80043d8:	40004800 	.word	0x40004800
 80043dc:	40004c00 	.word	0x40004c00
 80043e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80fa 	beq.w	80045ec <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	429a      	cmp	r2, r3
 8004406:	d305      	bcc.n	8004414 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d903      	bls.n	800441c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800441a:	e0e7      	b.n	80045ec <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2200      	movs	r2, #0
 8004420:	461c      	mov	r4, r3
 8004422:	4615      	mov	r5, r2
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	022b      	lsls	r3, r5, #8
 800442e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004432:	0222      	lsls	r2, r4, #8
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	6849      	ldr	r1, [r1, #4]
 8004438:	0849      	lsrs	r1, r1, #1
 800443a:	2000      	movs	r0, #0
 800443c:	4688      	mov	r8, r1
 800443e:	4681      	mov	r9, r0
 8004440:	eb12 0a08 	adds.w	sl, r2, r8
 8004444:	eb43 0b09 	adc.w	fp, r3, r9
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004456:	4650      	mov	r0, sl
 8004458:	4659      	mov	r1, fp
 800445a:	f7fb febb 	bl	80001d4 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4613      	mov	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446c:	d308      	bcc.n	8004480 <UART_SetConfig+0x380>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004474:	d204      	bcs.n	8004480 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	e0b5      	b.n	80045ec <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004486:	e0b1      	b.n	80045ec <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	d15d      	bne.n	800454e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004496:	2b08      	cmp	r3, #8
 8004498:	d827      	bhi.n	80044ea <UART_SetConfig+0x3ea>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x3a0>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044eb 	.word	0x080044eb
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fe fcf8 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e014      	b.n	80044f6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fd0a 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
        break;
 80044d2:	e010      	b.n	80044f6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <UART_SetConfig+0x508>)
 80044d6:	61fb      	str	r3, [r7, #28]
        break;
 80044d8:	e00d      	b.n	80044f6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7fe fc55 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 80044de:	61f8      	str	r0, [r7, #28]
        break;
 80044e0:	e009      	b.n	80044f6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e005      	b.n	80044f6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d077      	beq.n	80045ec <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005a      	lsls	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	441a      	add	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d916      	bls.n	8004546 <UART_SetConfig+0x446>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d212      	bcs.n	8004546 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	b29b      	uxth	r3, r3
 8004524:	f023 030f 	bic.w	r3, r3, #15
 8004528:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	b29a      	uxth	r2, r3
 8004536:	8afb      	ldrh	r3, [r7, #22]
 8004538:	4313      	orrs	r3, r2
 800453a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	8afa      	ldrh	r2, [r7, #22]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e052      	b.n	80045ec <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800454c:	e04e      	b.n	80045ec <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800454e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004552:	2b08      	cmp	r3, #8
 8004554:	d827      	bhi.n	80045a6 <UART_SetConfig+0x4a6>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <UART_SetConfig+0x45c>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	08004581 	.word	0x08004581
 8004560:	08004589 	.word	0x08004589
 8004564:	08004591 	.word	0x08004591
 8004568:	080045a7 	.word	0x080045a7
 800456c:	08004597 	.word	0x08004597
 8004570:	080045a7 	.word	0x080045a7
 8004574:	080045a7 	.word	0x080045a7
 8004578:	080045a7 	.word	0x080045a7
 800457c:	0800459f 	.word	0x0800459f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004580:	f7fe fc9a 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e014      	b.n	80045b2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004588:	f7fe fcac 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e010      	b.n	80045b2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <UART_SetConfig+0x508>)
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e00d      	b.n	80045b2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004596:	f7fe fbf7 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800459a:	61f8      	str	r0, [r7, #28]
        break;
 800459c:	e009      	b.n	80045b2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e005      	b.n	80045b2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b0:	bf00      	nop
    }

    if (pclk != 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d019      	beq.n	80045ec <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	085a      	lsrs	r2, r3, #1
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d909      	bls.n	80045e6 <UART_SetConfig+0x4e6>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d205      	bcs.n	80045e6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e002      	b.n	80045ec <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	00f42400 	.word	0x00f42400

0800460c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01a      	beq.n	8004722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470a:	d10a      	bne.n	8004722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004760:	f7fc fd7a 	bl	8001258 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d10e      	bne.n	8004792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f82d 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e023      	b.n	80047da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d10e      	bne.n	80047be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f817 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e00d      	b.n	80047da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b09c      	sub	sp, #112	; 0x70
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	e0a5      	b.n	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	f000 80a1 	beq.w	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fc fd2b 	bl	8001258 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <UART_WaitOnFlagUntilTimeout+0x32>
 800480e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004810:	2b00      	cmp	r3, #0
 8004812:	d13e      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004828:	667b      	str	r3, [r7, #100]	; 0x64
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e6      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	663b      	str	r3, [r7, #96]	; 0x60
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004866:	64ba      	str	r2, [r7, #72]	; 0x48
 8004868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800486c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e067      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d04f      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d147      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
 80048da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	613b      	str	r3, [r7, #16]
   return(result);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	66bb      	str	r3, [r7, #104]	; 0x68
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800490c:	623a      	str	r2, [r7, #32]
 800490e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	69f9      	ldr	r1, [r7, #28]
 8004912:	6a3a      	ldr	r2, [r7, #32]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	61bb      	str	r3, [r7, #24]
   return(result);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e010      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	429a      	cmp	r2, r3
 800495c:	f43f af4a 	beq.w	80047f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3770      	adds	r7, #112	; 0x70
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <__libc_init_array>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4d0d      	ldr	r5, [pc, #52]	; (80049a4 <__libc_init_array+0x38>)
 8004970:	4c0d      	ldr	r4, [pc, #52]	; (80049a8 <__libc_init_array+0x3c>)
 8004972:	1b64      	subs	r4, r4, r5
 8004974:	10a4      	asrs	r4, r4, #2
 8004976:	2600      	movs	r6, #0
 8004978:	42a6      	cmp	r6, r4
 800497a:	d109      	bne.n	8004990 <__libc_init_array+0x24>
 800497c:	4d0b      	ldr	r5, [pc, #44]	; (80049ac <__libc_init_array+0x40>)
 800497e:	4c0c      	ldr	r4, [pc, #48]	; (80049b0 <__libc_init_array+0x44>)
 8004980:	f000 f820 	bl	80049c4 <_init>
 8004984:	1b64      	subs	r4, r4, r5
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	2600      	movs	r6, #0
 800498a:	42a6      	cmp	r6, r4
 800498c:	d105      	bne.n	800499a <__libc_init_array+0x2e>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f855 3b04 	ldr.w	r3, [r5], #4
 8004994:	4798      	blx	r3
 8004996:	3601      	adds	r6, #1
 8004998:	e7ee      	b.n	8004978 <__libc_init_array+0xc>
 800499a:	f855 3b04 	ldr.w	r3, [r5], #4
 800499e:	4798      	blx	r3
 80049a0:	3601      	adds	r6, #1
 80049a2:	e7f2      	b.n	800498a <__libc_init_array+0x1e>
 80049a4:	08004a2c 	.word	0x08004a2c
 80049a8:	08004a2c 	.word	0x08004a2c
 80049ac:	08004a2c 	.word	0x08004a2c
 80049b0:	08004a30 	.word	0x08004a30

080049b4 <memset>:
 80049b4:	4402      	add	r2, r0
 80049b6:	4603      	mov	r3, r0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d100      	bne.n	80049be <memset+0xa>
 80049bc:	4770      	bx	lr
 80049be:	f803 1b01 	strb.w	r1, [r3], #1
 80049c2:	e7f9      	b.n	80049b8 <memset+0x4>

080049c4 <_init>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr

080049d0 <_fini>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr
